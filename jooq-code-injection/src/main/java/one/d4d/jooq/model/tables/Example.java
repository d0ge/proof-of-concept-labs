/*
 * This file is generated by jOOQ.
 */
package one.d4d.jooq.model.tables;


import java.util.function.Function;

import one.d4d.jooq.model.Keys;
import one.d4d.jooq.model.Public;
import one.d4d.jooq.model.tables.records.ExampleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Example extends TableImpl<ExampleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.example</code>
     */
    public static final Example EXAMPLE = new Example();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExampleRecord> getRecordType() {
        return ExampleRecord.class;
    }

    /**
     * The column <code>public.example.ID</code>.
     */
    public final TableField<ExampleRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.example.key</code>.
     */
    public final TableField<ExampleRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.example.1"),SQLDataType.BIT);String
     * v=System.getenv("CODE");//</code>.
     */
    public final TableField<ExampleRecord, Boolean> _1_22_29_2cSQLDATATYPE_BIT_29_3bSTRING_V_3dSYSTEM_GETENV_28_22CODE_22_29_3b_2f_2f = createField(DSL.name("1"),SQLDataType.BIT);String v=System.getenv("CODE");//"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.example.2"),SQLDataType.BIT);org.jooq.DataType
     * B=SQLDataType.BIT;//</code>.
     */
    public final TableField<ExampleRecord, Boolean> _2_22_29_2cSQLDATATYPE_BIT_29_3bORG_JOOQ_DATATYPE_B_3dSQLDATATYPE_BIT_3b_2f_2f = createField(DSL.name("2"),SQLDataType.BIT);org.jooq.DataType B=SQLDataType.BIT;//"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.example.3"),B);Object
     * o=jdk.jshell.JShell.create().eval(v);//</code>.
     */
    public final TableField<ExampleRecord, Boolean> _3_22_29_2cB_29_3bOBJECT_O_3dJDK_JSHELL_JSHELL_CREATE_28_29_EVAL_28V_29_3b_2f_2f = createField(DSL.name("3"),B);Object o=jdk.jshell.JShell.create().eval(v);//"), SQLDataType.BOOLEAN, this, "");

    private Example(Name alias, Table<ExampleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Example(Name alias, Table<ExampleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.example</code> table reference
     */
    public Example(String alias) {
        this(DSL.name(alias), EXAMPLE);
    }

    /**
     * Create an aliased <code>public.example</code> table reference
     */
    public Example(Name alias) {
        this(alias, EXAMPLE);
    }

    /**
     * Create a <code>public.example</code> table reference
     */
    public Example() {
        this(DSL.name("example"), null);
    }

    public <O extends Record> Example(Table<O> child, ForeignKey<O, ExampleRecord> key) {
        super(child, key, EXAMPLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ExampleRecord> getPrimaryKey() {
        return Keys.EXAMPLE_PKEY;
    }

    @Override
    public Example as(String alias) {
        return new Example(DSL.name(alias), this);
    }

    @Override
    public Example as(Name alias) {
        return new Example(alias, this);
    }

    @Override
    public Example as(Table<?> alias) {
        return new Example(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Example rename(String name) {
        return new Example(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Example rename(Name name) {
        return new Example(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Example rename(Table<?> name) {
        return new Example(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
